==============================================================================
            ATTENDANCE MANAGEMENT SYSTEM - CODE EXPLANATION
==============================================================================

This document provides a comprehensive explanation of the Attendance Management 
System implemented in C. The system allows for attendance tracking across 
multiple faculties/departments with user authentication, data persistence,
and reporting capabilities.

------------------------------------------------------------------------------
TABLE OF CONTENTS
------------------------------------------------------------------------------
1. OVERVIEW
2. CODE STRUCTURE
3. DATA STRUCTURES
4. CORE FUNCTIONALITY
5. FILE MANAGEMENT
6. USER INTERFACE
7. ADVENTURE GAME
8. WORKFLOW EXAMPLES

==============================================================================
1. OVERVIEW
==============================================================================

The Attendance Management System is a terminal-based application that provides:

- Multi-user authentication (admin, faculty)
- Student management
- Attendance recording and tracking
- Searching and reporting capabilities
- Data persistence through JSON files
- Colorful user interface
- Built-in adventure game for entertainment

The system uses a modular approach with separate functions for different tasks,
making it maintainable and extensible.

==============================================================================
2. CODE STRUCTURE
==============================================================================

The code is organized into logical sections:

1. Header Inclusions & Preprocessor Directives
   - Standard libraries (stdio.h, stdlib.h, string.h, etc.)
   - ANSI color code definitions for terminal output
   - Constant definitions for array sizes

2. Data Structure Definitions
   - User: Stores authentication information
   - Student: Stores student identity information
   - Attendance: Stores attendance records

3. Global Variables
   - Arrays for users, students, and attendance records
   - Counter variables to track array usage
   - Currently logged-in user information

4. Function Declarations
   - User management functions
   - Student management functions
   - Attendance tracking functions
   - File I/O functions
   - Utility functions
   - Adventure game functions

5. Implementation of Functions
   - Main function with program flow control
   - User authentication functions
   - Data management functions
   - File I/O functions
   - Adventure game implementation

==============================================================================
3. DATA STRUCTURES
==============================================================================

3.1 User Structure
-----------------
struct User {
    char username[MAX_USERNAME];  // Username for login
    char password[MAX_PASSWORD];  // Password for authentication
    char role[20];                // Role (admin, faculty)
};

3.2 Student Structure
-------------------
struct Student {
    char studentId[20];  // Unique student identifier
    char name[50];       // Student's full name
};

3.3 Attendance Structure
----------------------
struct Attendance {
    char faculty[50];     // Faculty/department name
    char studentId[20];   // Student identifier
    char name[50];        // Student name
    char date[20];        // Date of attendance record
    char time[10];        // Time of attendance record
    char status;          // 'P' for present, 'A' for absent
};

==============================================================================
4. CORE FUNCTIONALITY
==============================================================================

4.1 User Authentication
----------------------
Functions: login(), registerUser(), loadUsersFromFile(), saveUsersToFile(), loadDefaultUsers()

The system supports multiple users with different roles. When the program starts,
it attempts to load existing users from users.json. If no users are found, it 
creates a default admin account. Users can register new accounts, and credentials
are saved to the JSON file.

The login() function handles credential verification with a maximum of 3 attempts.

4.2 Student Management
--------------------
Functions: addStudents(), saveStudentsToFile(), loadStudentsFromFile()

The system allows adding students with their ID and name. Student data is stored
in memory and persisted to students.json for future sessions.

4.3 Attendance Tracking
---------------------
Functions: takeBatchAttendance(), viewAttendance(), searchByDate(), 
searchByStudent(), generateReport(), editAttendance(), deleteAttendance()

- takeBatchAttendance(): Records attendance for all students in a batch
- viewAttendance(): Displays attendance records for a specific faculty
- searchByDate(): Filters and displays records by date
- searchByStudent(): Shows all attendance records for a specific student
- generateReport(): Creates attendance percentage reports
- editAttendance(): Allows modification of existing records
- deleteAttendance(): Removes attendance records by faculty and date

4.4 Data Synchronization
----------------------
Function: syncToServer()

The syncToServer() function saves attendance summaries to a central file named
Server.txt, which could be useful for administrative purposes or data backup.

==============================================================================
5. FILE MANAGEMENT
==============================================================================

The system uses JSON format for data persistence across sessions:

5.1 Users Data
------------
File: users.json
Format: Array of user objects with username, password, and role properties
Functions: saveUsersToFile(), loadUsersFromFile()

5.2 Students Data
--------------
File: students.json
Format: Array of student objects with studentId and name properties
Functions: saveStudentsToFile(), loadStudentsFromFile()

5.3 Attendance Data
----------------
Files: <faculty_name>.json (separate file for each faculty)
Format: JSON object with header metadata and array of attendance records
Functions: saveFacultyJSONFile(), loadFacultyAttendance()

5.4 Server Sync
------------
File: Server.txt
Format: Text-based formatted summary of attendance statistics
Function: syncToServer()

==============================================================================
6. USER INTERFACE
==============================================================================

The system uses ANSI color codes to create a visually appealing terminal interface:

- COLOR_RESET: Resets text formatting
- COLOR_RED: Used for errors and warnings
- COLOR_GREEN: Used for success messages and confirmations
- COLOR_YELLOW: Used for prompts and user input requests
- COLOR_BLUE: Used for headers and titles
- COLOR_MAGENTA: Used for specific sections and highlights
- COLOR_CYAN: Used for tables and structured data
- COLOR_BOLD: Used for emphasis

All menus and outputs are formatted consistently with tables and borders, 
making the interface intuitive and user-friendly.

The main menu displays 12 options:
1. Add Students to Database
2. Take Batch Attendance
3. View Attendance
4. Search by Date
5. Search by Student
6. Generate Attendance Report
7. Edit Attendance
8. Delete Attendance
9. Display Data in JSON Format
10. Exit
11. Try Adventure Game
12. Sync Attendance to Server

==============================================================================
7. ADVENTURE GAME
==============================================================================

The code includes a simple text-based adventure game as an entertainment feature.
Functions: startAdventure(), forestPath(), castlePath(), cavePath(), 
villagePath(), mountainPath(), riverPath(), gameOver(), victory()

The game presents the user with choices at each stage, leading to either victory
or defeat. It uses colorful text and loading animations to enhance the
experience.

The game paths include:
- Enchanted Forest
- Ancient Castle
- Dark Cave
- Friendly Village
- Majestic Mountain
- Serene River

Each path presents three options with different outcomes.

==============================================================================
8. WORKFLOW EXAMPLES
==============================================================================

8.1 Adding New Students
---------------------
1. User selects option 1 from the main menu
2. System prompts for Faculty/Department name
3. User enters the number of students to add
4. For each student, user enters ID and name
5. System saves student information to students.json
6. Confirmation message is displayed

8.2 Taking Attendance
------------------
1. User selects option 2 from the main menu
2. System prompts for Faculty/Department name
3. Current date and time are automatically captured
4. System shows each student name and prompts for status (P/A)
5. User enters P for present or A for absent for each student
6. Records are saved to <faculty>.json with user attribution
7. Confirmation message is displayed

8.3 Generating Reports
-------------------
1. User selects option 6 from the main menu
2. System prompts for Faculty/Department name
3. System calculates attendance percentage for each student
4. A formatted table report is displayed showing:
   - Student ID
   - Student Name
   - Attendance Percentage

8.4 Using the Adventure Game
-------------------------
1. User selects option 11 from the main menu
2. System displays adventure paths with colorful descriptions
3. User selects a path (1-6)
4. System shows a loading animation
5. User is presented with 3 choices at the selected location
6. Based on choice, user either wins or loses the game
7. User can choose to play again or return to the main menu

==============================================================================
                          END OF DOCUMENT
==============================================================================
